name: Deploy Astro site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["deploy"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
#  pages: write
#  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deploy"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/yarn.lock
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: astro-output
          path: ${{ env.BUILD_PATH }}/dist
          if-no-files-found: error

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Download artifact
        id: download
        uses: actions/download-artifact@v3
        with:
          name: astro-output

      #- name: Show downloaded artifact
      #  run: ls -R

      - name: Set up SSH Stuff
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }}{% endraw%} >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa
          ssh-agent -a $SSH_AUTO_SOCK > /dev/null
          ssp-add /home/runner/.ssh/id_rsa

      - name: Set up Known-hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }}{% endraw%} >> ~/.ssh/known_hosts

      - name: Deploy build using rsync
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          rsync -avz ./dist/ ${{ secrets.DEPLOY_USERNAME }}@${{ secrets.DEPLOY_HOST }}:/home/${{ secrets.DEPLOY_USERNAME }}/deploy/
